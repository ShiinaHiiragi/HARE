#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
var readline = require('readline');
var dbInitialize = require('./db').dbInitialize;
var exec = require('./db').exec;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
console.log(`Express is listening on http://localhost:${port}/`);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server 'error' event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server 'listening' event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

// TEMP: delete it later
const debugFunction = () => {
  exec('sign abc@xyz.com Ichinoe 123123123'.split(/\s+/))
  .then(() => { return require('./db').newUnit(1, 1, 'Operating System') })
  .then(() => { return require('./db').newUnit(1, 2, 'Math') })
  .then(() => { return require('./db').newUnit(1, 3, 'Networks') })
  .then(() => { return require('./db').newPage(1, 1, 1, 'TLB', 'Translation Lookaside Buffer') })
  .then(() => { return require('./db').newPage(1, 1, 2, 'Process',
    'The instance of a computer program that is being executed by one or many threads.') })
  .then(() => { return require('./db').newPage(1, 1, 3, 'Dispatching', '') })
  .then(() => { return require('./db').newPage(1, 2, 1, 'Predicates', '') })
  .then(() => { return require('./db').newPage(1, 3, 1, 'DNS', 'Domain Name System') })
  .then(() => { return require('./db').newPage(1, 3, 2, 'TCP/IP', '') })
  .then(() => { return require('./db').newItem(1, 1, 1, 1, 'Q1', 'A1') })
  .then(() => { return require('./db').newItem(1, 1, 1, 2, 'Q2', 'A2') })
  .then(() => { return require('./db').newItem(1, 1, 1, 3, 'Q3', 'A3') })
  .then(() => { return require('./db').newItem(1, 1, 1, 4, 'Q4', 'A4') })
  .then(() => { return require('./db').newItem(1, 1, 1, 5, 'Q5', 'A5') })
  .then(() => { return require('./db').newItem(1, 1, 1, 6, 'Q6', 'A6') })
  .then(() => { return require('./db').newItem(1, 1, 1, 7, 'Q7', 'A7') })
  .then(() => { return require('./db').newItem(1, 1, 1, 8, 'Q8', 'A8') })
  .then(() => { return require('./db').newItem(1, 1, 1, 9, 'Q9', 'A9') })
  .then(() => { return require('./db').newItem(1, 1, 1, 10, 'Q10', 'A10') })
  .then(() => { return require('./db').newItem(1, 1, 1, 11, 'Q11', 'A11') })
  .then(() => { return require('./db').newItem(1, 1, 1, 12, 'Q12', 'A12') })
  // .then(() => { return require('./db')
    // .query(`update item set itemRecord = array['L', 'L', 'F', 'P']`) })
  .then(() => console.log('DEBUG: The units and pages are created.'))
  .then(() => {
    require('fs').readdir(require('path').join(__dirname, '../src/avatar'),
      (err, dir) => {
        require('../bin/db').saveAvatarExtent(1, require('path').extname(dir[0]));
      });
  });
};

/**
 * Initialize the databse
 */
dbInitialize(true).then(debugFunction);

/**
 * Read lines when listening to the port.
 */
const oneLine = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

(function shellLine() {
  oneLine.question('', (cmd) => {
    exec(cmd.split(/\s+/)).then(shellLine).catch(err => {
      console.log(err);
      shellLine();
    })
  })
})();
