#!/usr/bin/env node

/**
 * Module dependencies.
 */

var express = require('express');
var http = require('http');
var https = require('https');
var fs = require('fs');
var path = require('path');
var readline = require('readline');
var debug = require('debug')('server:server');
var app = require('../app');
var dbInitialize = require('./db').dbInitialize;
var exec = require('./db').exec;
var api = require('./api');

/**
 * Get port from environment and store in Express.
 */
var httpsArg = process.argv.includes('--https');
var port = api.port[httpsArg ? "https" : "http"];
app.set('port', port);

/**
 * Create HTTP(S) server.
 */

var server;
if (httpsArg) {
  // Nginx license: put two files in bin/https and change domain name
  var privateCrt = fs.readFileSync(path.join(__dirname, `https/1_${api.domain}_bundle.crt`), 'utf8');
  var privateKey = fs.readFileSync(path.join(__dirname, `https/2_${api.domain}.key`), 'utf8');
  const HTTPS_OPTOIN = {
    key: privateKey,
    cert: privateCrt
  };
  server = https.createServer(HTTPS_OPTOIN, app);

  // redirect http to https
  const httpApp = express();
  httpApp.all('*', (req, res) => {
    const hostWithPort = `${req.hostname}${api.port.https === 443 ? "" : `:${api.port.https}`}`
    res.redirect(301, `https://${hostWithPort}${req.originalUrl}`);
  });
  const httpServer = http.createServer(httpApp);
  httpServer.listen(api.port.http);
} else server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => {
  console.log(`Listening on http${httpsArg ? "s" : ""}://localhost:${port}/`)
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Event listener for HTTP server 'error' event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server 'listening' event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Initialize the databse
 */

dbInitialize(false);

/**
 * Read lines when listening to the port.
 */

const oneLine = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

(function shellLine() {
  oneLine.question('', (cmd) => {
    if (/^\s*$/.test(cmd)) shellLine();
    else exec(cmd.split(/\s+/)).then(shellLine).catch(err => {
      console.log(err);
      shellLine();
    })
  })
})();
